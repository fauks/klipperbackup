[include heatsoak.cfg]
##############################################################
##################  Anycubic Vyper Macros  ###################
##############################################################

###########################################################################################################################   PAUSE
[gcode_macro PAUSE]
description: Pause current print job
rename_existing: PAUSE_BASE
gcode:
    ##### set defaults #####
    {% set x = params.X|default(1) %}      #edit to your park position
    {% set y = params.Y|default(1) %}      #edit to your park position
    {% set z = params.Z|default(50)|float %} #edit to your park position
    {% set e = params.E|default(4) %}        #edit to your retract length
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% set lift_z = z|abs %}
    {% if act_z < (max_z - lift_z) %}
        {% set z_safe = lift_z %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    PAUSE_BASE
    G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G1 E-{e} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}
    {% if "xyz" in printer.toolhead.homed_axes %}    
      G1 Z{z_safe}
      G90
      G1 X{x} Y{y} F6000
    {% else %}
      {action_respond_info("Printer not homed")}
    {% endif %}

###########################################################################################################################   RESUME
[gcode_macro RESUME]
description: Resume current print job
rename_existing: RESUME_BASE
gcode:
    ##### set defaults #####
    {% set e = params.E|default(4) %} #edit to your retract length
    #### get VELOCITY parameter if specified ####
    {% if 'VELOCITY' in params|upper %}
      {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
    {%else %}
      {% set get_params = "" %}
    {% endif %}
    ##### end of definitions #####
    G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G1 E{e} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}  
    RESUME_BASE {get_params}

###########################################################################################################################   CANCEL_PRINT
[gcode_macro CANCEL_PRINT]
description: Cancel the current print job
rename_existing: CANCEL_PRINT_BASE
gcode:
    TURN_OFF_HEATERS
    G91                  ;Relative
    G1 E-1 F3000         ;Retract
    G1 Z5 F4500          ;Lift Z 
    G90                  ;Absolute
    G1 X0 Y220 F5000     ;Move X over and move bed forward
    CANCEL_PRINT_BASE

###########################################################################################################################   PREPARE_PRINT
[gcode_macro PREPARE_PRINT] 
gcode:
    {% set t_chamber = params.T_BED|default(0) %}
  
    HEAT_SOAK HEATER='chamber_heater' TARGET={t_chamber} SOAKER='temperature_sensor chamber_sensor' SOAK_TEMP=45 RATE=0.25 TEMP_SMOOTH=6 RATE_SMOOTH=30 COMPLETE='SOAKING_COMPLETE' CANCEL='CANCEL_PRINT' TIMEOUT=90 HEATING_REPORT_INTERVAL=10 SOAKING_REPORT_INTERVAL=30

###########################################################################################################################   START_PRINT
[gcode_macro START_PRINT]
#variable_parameter_AREA_START : 0,0
#variable_parameter_AREA_END : 0,0
gcode:
    {% set t_bed = params.T_BED|default(0) %}
    {% set t_extruder = params.T_EXTRUDER|default(0) %}
    {% set area_start = params.AREA_START|default(0,0) %}
    {% set area_end = params.AREA_END|default(0,0) %}

    M104 S140                                #Extruder Heat Up Standby Mode
    M190 S{t_bed}                            #Heat Up Bed
    M117 Heating...
    _CG28                                    #Home if needed
    #Z_TILT_ADJUST                            #Perform Z_TILT_ADJUST                                     
    M83    #Extruder Relative Mode 
    BED_MESH_CALIBRATE AREA_START={area_start} AREA_END={area_end} #add AREA_START=%MINX%,%MINY% AREA_END=%MAXX%,%MAXY% to cura
    #BED_MESH_CALIBRATE PROFILE=default
    G1 X0 Y0 F5000                           #Move To Front Left Corner
    M117 Extruder heating to printing temp
    M109 S{t_extruder}                       #Extruder Heat Up Target Temp
    G92 E0                                   #Reset Extruder
    G90                                      #Absolut Positioning
    #BED_MESH_PROFILE LOAD=default
    M117 Primeline
    BED_MESH_LOAD PROFILE=default
    PRIME_LINE                               #First Move
    G90 ;absolute positioning
    M82 ;set extruder to absolute mode
    M300
    M117 Printing!

###########################################################################################################################   PRIME_LINE
[gcode_macro PRIME_LINE]
gcode:
    G1 X2 Y2 F4500                 ;Move To Front Left Corner
    G0 Z0.9                          ;Drop Down To Bed
    G92 E0                         ;Reset Extruder
    G1 X100 E40 F500               ;Extrude First Line
    G1 Z1 F4500                  ;Move Up For Second Line
    G1 X25 E32 F500                ;Extrude Second Line
    G1 E-0.7 F3000                 ;Retract 
    G92 E0                         ;Reset Extruder
    G1 Z10 F4500                   ;Move Up In Z

###########################################################################################################################   REMOVE_FILAMENT
[gcode_macro REMOVE_FILAMENT]
gcode:
    G28
    M109 S220
    M83
    G1 E3 F100
    M83
    G1 E-50 F1200
    M83
    G1 E-50 F1400
    M83
    G1 E-50 F1600
    M83
    G1 E-50 F1600
    M83
    G1 E-50 F1600
    M83
    G1 E-50 F1600
    M83
    G1 E-50 F1600
    M83
    G1 E-50 F1600
    M83
    G1 E-50 F1600
    M83
    G1 E-50 F1600

###########################################################################################################################   ADD_FILAMENT
[gcode_macro ADD_FILAMENT]
gcode:
    G28
    M109 S220
    M83
    G1 E50 F1000
    M83
    G1 E50 F1200
    M83
    G1 E50 F1200
    M83
    G1 E50 F1200
    M83
    G1 E50 F1200
    M83
    G1 E50 F1200
    M83
    G1 E50 F1200
    M83
    G1 E50 F400
    M83
    G1 E50 F250

###########################################################################################################################   POWER_OFF_PRINTER
[gcode_macro POWER_OFF_PRINTER]
gcode:
  {action_call_remote_method("set_device_power",
                             device="Vyper",
                             state="off")}

###########################################################################################################################   POWER_OFF_CHAMBER_HEATER
[gcode_macro POWER_OFF_CHAMBER_HEATER]
gcode:
  {action_call_remote_method("set_device_power",
                             device="chamber_heater",
                             state="off")}

###########################################################################################################################   POWER_ON_CHAMBER_HEATER
[gcode_macro POWER_ON_CHAMBER_HEATER]
gcode:
  {action_call_remote_method("set_device_power",
                             device="chamber_heater",
                             state="ON")}


###########################################################################################################################   delayed_printer_off
[delayed_gcode delayed_printer_off]
initial_duration: 0
gcode:
  {% if printer.idle_timeout.state == "Idle" %}
    POWER_OFF_PRINTER
  {% endif %}

###########################################################################################################################   idle_timeout
[idle_timeout]
gcode:
  M84
  TURN_OFF_HEATERS
  UPDATE_DELAYED_GCODE ID=delayed_printer_off DURATION=30

###########################################################################################################################   _CG28
[gcode_macro _CG28]
description: Conditional homing
gcode:
  {% if "xyz" not in printer.toolhead.homed_axes %}
    G28
  {% endif %}

###########################################################################################################################   M900
[gcode_macro M900] #Pressure Advance 
gcode:
  {% if 'K' in params %}
    {% if 'E' in params %}
      SET_PRESSURE_ADVANCE EXTRUDER={params.E} ADVANCE={params.K}
    {% else %}
      SET_PRESSURE_ADVANCE ADVANCE={params.K}
    {% endif %}
  {% endif %}

###########################################################################################################################   _SET_FAN_SPEED
[gcode_macro _SET_FAN_SPEED]
gcode:
    M106 S{ (params.PERCENT | float) * 255 / 100 }

###########################################################################################################################   CENTER
[gcode_macro CENTER]
gcode:
    G90
    G0 X{ printer.toolhead.axis_maximum.x/2 } Y{ printer.toolhead.axis_maximum.y/2 } Z{ printer.toolhead.axis_maximum.z/2 } F5000

[gcode_macro M300]
gcode:
    {% set tones = [1000, 1500, 2000, 2500, 3000, 2500, 2000, 1500, 1000] %} ; S sets the tone frequency
    {% for count in tones %}
    {% set cytime = 1 / count %}
    SET_PIN PIN=beeper_pin VALUE={0.5} CYCLE_TIME={cytime} ;Play tone
    G4 P50 ;tone duration
    SET_PIN PIN=beeper_pin VALUE=0
    {% endfor %}

###########################################################################################################################   BED_MESH_CALIBRATE

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_BASE
; gcode parameters
variable_parameter_AREA_START : 0,0
variable_parameter_AREA_END : 0,0
; the clearance between print area and probe area 
variable_mesh_area_offset : 5
; number of sample per probe point
variable_probe_samples : 2
; minimum probe count
variable_min_probe_count : 3
; scale up the probe count, should be 1.0 ~ < variable_max_probe_count/variable_min_probe_count
variable_probe_count_scale_factor : 1.0
; enable preference index
variable_enable_reference_index : False
gcode:
    {% if params.AREA_START and params.AREA_END %}
        {% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
        {% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
        {% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
        {% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
        {% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}

        {% set area_min_x = params.AREA_START.split(",")[0]|float %}
	{% set area_min_y = params.AREA_START.split(",")[1]|float %}
	{% set area_max_x = params.AREA_END.split(",")[0]|float %}
	{% set area_max_y = params.AREA_END.split(",")[1]|float %}

	{% if bedMeshConfig.probe_count.split(",")|length == 2 %}
            {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
            {% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
        {% else %}
            {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
            {% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}
        {% endif %}

	{% set meshMaxPointX = meshPointX %}
	{% set meshMaxPointY = meshPointY %}


        {% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
            {% if area_min_x - mesh_area_offset >=  safe_min_x %}
                {% set area_min_x = area_min_x - mesh_area_offset %}
            {% else %}
                {% set area_min_x = safe_min_x %}
            {% endif %}

            {% if area_min_y - mesh_area_offset >=  safe_min_y %}
                {% set area_min_y = area_min_y - mesh_area_offset %}
            {% else %}
                {% set area_min_y = safe_min_y %}
            {% endif %}

            {% if area_max_x + mesh_area_offset <=  safe_max_x %}
                {% set area_max_x = area_max_x + mesh_area_offset %}
            {% else %}
                {% set area_max_x = safe_max_x %}
            {% endif %}

            {% if area_max_y + mesh_area_offset <=  safe_max_y %}
                {% set area_max_y = area_max_y + mesh_area_offset %}
            {% else %}
                {% set area_max_y = safe_max_y %}
            {% endif %}

            {% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
            {% if meshPointX < min_probe_count %}
                {% set meshPointX = min_probe_count %}
            {% endif %}
	    {% if meshPointX > meshMaxPointX %}
                {% set meshPointX = meshMaxPointX %}
            {% endif %}

            {% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
            {% if meshPointY < min_probe_count %}
                {% set meshPointY = min_probe_count %}
            {% endif %}
	    {% if meshPointY > meshMaxPointY %}
                {% set meshPointY = meshMaxPointY %}
            {% endif %}

            {% set algorithm = "lagrange" %}
            {% if "algorithm" in bedMeshConfig and meshPointX >=4 and meshPointY >=4 %}
                {% set algorithm = bedMeshConfig.algorithm %}
            {% endif %}

            {% if enable_reference_index %}
                {% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}
                BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}
            {% else %}
                BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}
            {% endif %}
        {% else %}
            BED_MESH_CALIBRATE_BASE
        {% endif %}
    {% else %}
        BED_MESH_CALIBRATE_BASE
    {% endif %}

[gcode_macro WLED_ON]
description: Turn WLED strip on using optional preset and resets led colors
gcode:
  {% set strip = params.STRIP|string %}
  {% set preset = params.PRESET|default(-1)|int %}

  {action_call_remote_method("set_wled_state",
                             strip=strip,
                             state=True,
                             preset=preset)}

[gcode_macro WLED_OFF]
description: Turn WLED strip off
gcode:
  {% set strip = params.STRIP|string %}

  {action_call_remote_method("set_wled_state",
                             strip=strip,
                             state=False)}